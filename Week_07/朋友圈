class Solution {
    public int findCircleNum(int[][] M) {
       int n = M.length;
       UnionFind  uf = new UnionFind(n);
       for (int i = 0; i < n - 1; i++)
        for (int j = i + 1; j < n; j++)
            if (M[i][j] == 1)
                uf.union(i, j);
        return uf.count();
    }

}
//使用并查集
class  UnionFind {
    private int count = 0;
    private int[] parent;
    public UnionFind(int n) {
        count = n;
        parent = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = i; //初始化自己指向自己 ，作为领头元素
        }
    }
    public int find(int p) {
        while (p != parent[p]) {
            //向上不断的找parent；
            parent[p] = parent[parent[p]];
            p = parent[p];
        }
        return p;
    }
    //合并
    public void union(int p, int q) {
        int rootP = find(p);
        int rootQ = find(q);
        if (rootP == rootQ)
            return;
        parent[rootP] = rootQ;
        count--;
    }
    public int count() {
        return count;
    }
}