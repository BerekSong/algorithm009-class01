class Solution {

    public int numIslands(char[][] grid) {
        if (grid == null || grid.length == 0 )
            return 0;
        int rn = grid.length;
        int cn = grid[0].length;
        int count = 0;
        for (int i = 0; i < rn; i++)
            for (int j = 0; j < cn; j++) {
                if (grid[i][j] == '1'){
                    count++;
                    dfs(grid, i, j);
                }
            }
        return count;
    }
    private void dfs(char[][] grid, int r, int c) {
        // 判断 base case
        if (!inArea(grid, r, c))
            return;
        // 如果这个格子不是岛屿，直接返回
        if (grid[r][c] != '1')
            return;
        // 将格子标记为「已遍历过」
        grid[r][c] = '2';

        // 访问上、下、左、右四个相邻结点
        dfs(grid, r - 1, c);
        dfs(grid, r + 1, c);
        dfs(grid, r, c - 1);
        dfs(grid, r, c + 1);
    }
    // 判断坐标 (r, c) 是否在网格中
   private  boolean inArea(char[][] grid, int r, int c) {
        return 0 <= r && r < grid.length
                && 0 <= c && c < grid[0].length;
    }

}