class Solution {
    List<List<Integer>> res = new ArrayList<>();
    public List<List<Integer>> permuteUnique(int[] nums) {
        // 记录「路径」
        LinkedList<Integer> track = new LinkedList<>();
        //首先给数组排序
        Arrays.sort(nums);
        backtrack(nums, new boolean[nums.length], track);
        return res;
    }
    // 路径：记录在 track 中
    // 选择列表：nums 中不存在于 track 的那些元素
    // 结束条件：nums 中的元素全都在 track 中出现
    private void backtrack(int[] nums, boolean[] visited, LinkedList<Integer> track) {
        //terminator
        if (track.size() == nums.length) {
            res.add(new LinkedList(track));
            return;
        }
        //选择列表
        for (int i = 0; i < nums.length; i++) {
            //其次，我们已经选择过的不需要再放进去了
            if(visited[i]) continue;
            //接下来，如果当前节点与他的前一个节点一样，并其他的前一个节点已经被遍历过了，那我们也就不需要了。
            if(i>0 && nums[i] == nums[i-1] && visited[i-1]) break;

            // 做选择
            track.add(nums[i]);
            visited[i] = true;
            // 进入下一层决策树
            backtrack(nums, visited, track);
            // 取消选择
            track.removeLast();
            visited[i] = false;
        }
    }
}



