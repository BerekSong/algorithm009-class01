class Solution {

    public int numIslands(char[][] grid) {
        if (grid == null || grid.length == 0)
            return 0;
        int r = grid.length;
        int c = grid[0].length;
        int count = 0;
        for (int i = 0; i < r; i++) {
            for (int j = 0; j < c; j++) {
                if (grid[i][j] == '1'){
                    count++;
                    dfs(grid, i, j);
                }
            }
        }
        return count;
    }
    private void dfs(char[][] grid, int r, int c) {
        if (!isArea(grid, r, c)
            return;
        if (grid[r][c] != '1')
            return;
        grid[r][c] = '2';

        dfs(grid, r + 1, c);
        dfs(grid, r - 1, c);
        dfs(grid, r, c + 1);
        dfs(grid, r, c - 1);
    }
    private boolean isArea(char[][] grid, int r, int c) {
        return 0 <= r && r < grid.length
                        && 0 <= c && c < grid[0].length;
    }
}