class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        Set<String> wordSet = new HashSet<>(wordList);
        if (wordSet.size() ==0 || !wordSet.contains(endWord))
            return 0;
        wordSet.remove(beginWord);

        Queue<String> que = new ArrayDeque<>();
        que.add(beginWord);

        Set<String> visited = new HashSet<>();
        visited.add(beginWord);

        int wordLen = beginWord.length();
        int step = 0;

        while (!que.isEmpty()) {
            int size = que.size();
            for (int i = 0; i < size; i++) {
                String word = que.poll();
                char[] charArray = word.toCharArray();

                for (int j = 0; j < wordLen; j++) {
                    char originChar = charArray[j];

                    for (char k = 'a'; k <= 'z'; k++) {
                        if (k == originChar)
                            continue;
                        charArray[j] = k;
                        String nextWord = String.valueOf(charArray);

                        if (wordSet.contains(nextWord)){
                            if (nextWord.equals(endWord)
                                return step + 1;
                            if (!visited.contains(nextWord)) {
                                que.add(nextWord);
                                visited.add(nextWord);
                            }
                        }
                    }
                    charArray[j] = originChar;
                }
            }
            step++;
        }
        return 0;
    }
}