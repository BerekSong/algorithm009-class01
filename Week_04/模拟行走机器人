/**
The robot starts at point (0, 0) and faces north. Which edge of grid is to the north?
Since it will go to point (3, 4) with commands = [4,-1,3], obstacles = [], we know that the right edge is to the North.

     W
  S -|- N
     E
How do we represent absolute orientations given only relative turning directions(i.e., left or right)? We define direction indicates the absolute orientation as below:

North, direction = 0, directions[direction] = {0, 1}
East,  direction = 1, directions[direction] = {1, 0}
South, direction = 2, directions[direction] = {0, -1}
West,  direction = 3, directions[direction] = {-1, 0}

direction will increase by one when we turn right,
and will decrease by one (or increase by three) when we turn left.

**/

class Solution {
    public int robotSim(int[] commands, int[][] obstacles) {
        int[][] directions ={{0,1},{1,0},{0,-1},{-1,0}};

        Set<String> obstaclesSet = new HashSet<>();
        for (int[] obstacle : obstacles) {
            obstaclesSet.add(obstacle[0] + " " + obstacle[1]);
        }
        int x = 0, y = 0, direction = 0, maxDistSquare = 0;
        for (int i = 0; i < commands.length; i++) {
            if (commands[i] == -2) { // Turns left
                direction = (direction + 3) % 4;
            } else if (commands[i] == -1) { // Turns right
                direction = (direction + 1) % 4;
            } else { // Moves forward commands[i] steps
                int step = 0;
                while (step < commands[i]
                       && (!obstaclesSet.contains((x + directions[direction][0]) + " " + (y + directions[direction][1])))
                      ) {
                    x += directions[direction][0];
                    y += directions[direction][1];
                    step++;
                }
            }
            maxDistSquare = Math.max(maxDistSquare, x * x + y * y);
        }

        return maxDistSquare;
    }
    }
}