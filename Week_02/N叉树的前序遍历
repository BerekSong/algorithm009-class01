class Solution {
    //递归的方式处理
    public List<Integer> preorder(Node root) {
        List<Integer> res = new ArrayList<>();
        recursion(root, res);
        return res;
    }
    private void recursion(Node root ,List<Integer> list) {
        if (root != null) {
            list.add(root.val);
            for (node child : root.children) {
                recursion(child, list);
            }
        }
    }
}

class Solution {
    //迭代 时间复杂度O(n),空间复杂度O(n)
    public List<Integer> preorder(Node root) {
        LinkedList<Node> stack = new LinkedList<>();
        LinkedList<Integer> res = new LinkedList<>();
        if (root == null)
            return res;
        stack.add(root);
        while (!stack.isEmpty()) {
            Node node = stack.pollLast();
            res.add(node.val);
            Collections.reverse(node.children);
            for (Node child : node.children)
                stack.add(child);
        }
        return res;
    }

}